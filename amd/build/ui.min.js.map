{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["import Modal from \"core/modal\";\nimport Templates from \"core/templates\";\n\n// class MyModal extends Modal {\n//   static TYPE = \"mod_example/moldraw\";\n//   static TEMPLATE = \"mod_example/moldraw\";\n//   configure(modalConfig) {\n//     // Show this modal on instantiation.\n//     modalConfig.show = true;\n\n//     // Remove from the DOM on close.\n//     modalConfig.removeOnClose = true;\n//   }\n// }\n\nexport const handleAction = async() => {\n  await Modal.create({\n    body: `${await Templates.render(\"tiny_moldraw/moldraw_iframe\")}`,\n    show: true,\n    removeOnClose: true,\n  });\n};\n\n// /**\n//  * @param {*} url\n//  * @param { }type\n//  */\n// async function loadResource(url, type) {\n//   return new Promise((resolve, reject) => {\n//     if (type === \"script\") {\n//       var script = document.createElement(\"script\");\n//       script.type = \"text/javascript\";\n//       script.onload = resolve;\n//       script.onerror = reject;\n//       script.src = url;\n//       document.getElementsByTagName(\"head\")[0].appendChild(script);\n//     } else if (type === \"stylesheet\") {\n//       var link = document.createElement(\"link\");\n//       link.rel = \"stylesheet\";\n//       link.type = \"text/css\";\n//       link.onload = resolve;\n//       link.onerror = reject;\n//       link.href = url;\n//       document.getElementsByTagName(\"head\")[0].appendChild(link);\n//     } else {\n//       reject(new Error(\"Invalid resource type\"));\n//     }\n//   });\n// }\n\n// /**\n//  *\n//  */\n// async function loadAndRunAnotherFunction() {\n//   try {\n//     await loadResource(\"../../ChemDoodle/install/ChemDoodleWeb.css\", \"stylesheet\");\n//     await loadResource(\"../../ChemDoodle/install/uis/jquery-ui-1.11.4.css\", \"stylesheet\");\n//     await loadResource(\"../../ChemDoodle/install/ChemDoodleWeb.js\", \"script\");\n//     await loadResource(\"../../ChemDoodle/install/uis/ChemDoodleWeb-uis.js\", \"script\");\n//     await loadResource(\"../../chem/chem.css\", \"stylesheet\");\n\n//     // All resources are loaded, now you can execute your code\n//     // For example, you can run the provided script here\n\n//     ChemDoodle.ELEMENT[\"H\"].jmolColor = \"black\";\n//     ChemDoodle.ELEMENT[\"S\"].jmolColor = \"#B9A130\";\n//     // Main ketcher.\n//     const sketcher = new ChemDoodle.SketcherCanvas(\"sketcher\", 600, 350, {\n//       useServices: false,\n//       requireStartingAtom: false,\n//     });\n//     // We init the ketcher with an empty molecule object.\n//     sketcher.styles.atoms_displayTerminalCarbonLabels_2D = true;\n//     sketcher.styles.atoms_useJMOLColors = true;\n//     sketcher.styles.bonds_clearOverlaps_2D = true;\n//     sketcher.styles.shapes_color = \"#c10000\";\n//     sketcher.repaint();\n\n//     // Preview ketcher.\n//     const sketcher_viewer = new ChemDoodle.ViewerCanvas(\n//       \"sketcher-viewer-atto\",\n//       100,\n//       100\n//     );\n//     sketcher_viewer.styles.atoms_displayTerminalCarbonLabels_2D = true;\n//     sketcher_viewer.styles.atoms_useJMOLColors = true;\n//     sketcher_viewer.styles.bonds_clearOverlaps_2D = true;\n//     //sketcher_viewer.repaint();\n//     sketcher_viewer.emptyMessage = \"No data loaded\";\n//     sketcher.oldFunc = sketcher.checksOnAction;\n\n/*   Refactor the function, in order for the preview ketcher to be a copy of the main ketcher,\n         updated at every modification of the main ketcher. */\n// sketcher.checksOnAction = function (force) {\n//     this.oldFunc(force);\n//     //sketcher.repaint();\n//     let mols = sketcher.molecules;\n//     let forms = sketcher.shapes;\n//     sketcher_viewer.loadContent(mols, forms);\n//     sketcher.center();\n//     for (let i = 0, ii = this.molecules.length; i < ii; i++) {\n//         this.molecules[i].check();\n//     }\n// }\n\n/*  Button activated function, checks for the values of width and height in the input elements.\n        If empty, uses the default value. */\n/**\n *\n */\n// function function_resize() {\n//     let input_width = document.getElementById('width_input_molstructure').valueAsNumber;\n//     let input_height = document.getElementById('height_input_molstructure').valueAsNumber;\n//     let width;\n//     let height;\n\n//     if (input_width > 0) {\n//         width = input_width;\n//     } else {\n//         width = 100;\n//     }\n//     if (input_height > 0) {\n//         height = input_height;\n//     } else {\n//         height = 100;\n//     }\n//     sketcher_viewer.resize(width, height);\n// }\n// function insert() {\n//     if (window.parent.tinyMCE && window.parent.tinyMCE.activeEditor) {\n//         let mol = sketcher_viewer.getMolecule();\n//         let src = ChemDoodle.io.png.string(sketcher_viewer);\n//         let molFile = ChemDoodle.writeMOL(mol);\n//         let width = document.getElementById('width_input_molstructure').valueAsNumber;\n//         let height = document.getElementById('height_input_molstructure').valueAsNumber;\n//         var content =\n//             '<img src=\"' +\n//             src +\n//             '\" width=\"' +\n//             width +\n//             'px\" height=\"' +\n//             height +\n//             'px\">';\n\n//         window.parent.tinyMCE.activeEditor.execCommand(\n//             \"mceInsertContent\",\n//             0,\n//             content\n//         );\n//         window.parent.tinyMCE.activeEditor.execCommand(\n//             \"mceInsertContent\",\n//             0,\n//             \"<!--\" + molFile + \"-->\"\n//         );\n//         var modal = window.parent.document.querySelector('.modal');\n//         var closeButton = modal.querySelector('.close');\n//         closeButton.click();\n//     }\n//     console.log(\"button Click\")\n// }\n// eslint-disable-next-line no-console\n// console.log(\"All resources loaded successfully.\");\n\n// Call the function to load all resources and run the provided script\n// loadAndRunAnotherFunction();\n"],"names":["async","Modal","create","body","Templates","render","show","removeOnClose"],"mappings":"0XAe4BA,gBACpBC,eAAMC,OAAO,CACjBC,KAAO,SAAQC,mBAAUC,OAAO,iCAChCC,MAAM,EACNC,eAAe"}