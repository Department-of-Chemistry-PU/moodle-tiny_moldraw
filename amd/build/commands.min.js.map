{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_moldraw plugin.\n *\n * @module      tiny_moldraw/commands\n * @copyright   2024 Venkatesan Rangarajan <venkatesanrpu@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { getButtonImage } from \"editor_tiny/utils\";\nimport { get_string as getString } from \"core/str\";\nimport Templates from \"core/templates\";\nimport Modal from \"core/modal\";\nimport Config from \"core/config\";\nimport {\n  component,\n  startMolDrawButtonName,\n  startMolDrawMenuItemName,\n  icon,\n} from \"./common\";\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\n\nconst handleAction = async (editor) => {\n  await Modal.create({\n    title: await getString(\"sketchtitle\", \"tiny_moldraw\"),\n    body: `\n        ${await Templates.render(\"tiny_moldraw/moldraw_iframe\", {\n      src: `${Config.wwwroot}/lib/editor/tiny/plugins/moldraw/chem/chem.html`,\n    })}\n        \n      `,\n    footer: `<p>Example body content</p>\n      <button id=\"actionbutton\" class=\"actionbutton\">Insert</button>\n      <script src=\"http://localhost/lib/editor/tiny/plugins/moldraw/chem/chem2.js\"></script>`,\n    show: true,\n    removeOnClose: true,\n  });\n\n  // -------------------------\n  // Calculate the width and height for the modal\n  let modalWidth = 850;\n  let modalHeight = 600; // 80% of the screen height\n  let screenHeight = window.innerHeight;\n  let topPosition = (screenHeight - modalHeight) / 2;\n  // Apply CSS styles to the modal elements\n  document.querySelector(\".modal-dialog\").style.cssText =\n    \"max-width: unset; width: \" +\n    modalWidth +\n    \"px; height: \" +\n    modalHeight +\n    \"px; margin: \" +\n    topPosition +\n    \"px auto; padding: 0;\";\n  document.querySelector(\".modal-content\").style.cssText =\n    \"max-height: 600px; height: 100vh;\";\n  document.querySelector(\".modal-body\").style.cssText = \"padding: 0;\";\n  window.console.log(editor);\n\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async () => {\n  const [\n    startMolDrawButtonNameTitle,\n    startMolDrawMenuItemNameTitle,\n    buttonImage,\n  ] = await Promise.all([\n    getString(\"button_startMolDraw\", component),\n    getString(\"menuitem_startMolDraw\", component),\n    getButtonImage(\"icon\", component),\n  ]);\n\n  return (editor) => {\n    // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n    editor.ui.registry.addIcon(icon, buttonImage.html);\n\n    // Register the startMolDraw Toolbar Button.\n    editor.ui.registry.addButton(startMolDrawButtonName, {\n      icon,\n      tooltip: startMolDrawButtonNameTitle,\n      onAction: () => handleAction(editor),\n    });\n\n    // Add the startMolDraw Menu Item.\n    // This allows it to be added to a standard menu, or a context menu.\n    editor.ui.registry.addMenuItem(startMolDrawMenuItemName, {\n      icon,\n      text: startMolDrawMenuItemNameTitle,\n      onAction: () => handleAction(editor),\n    });\n  };\n};"],"names":["handleAction","async","Modal","create","title","body","Templates","render","src","Config","wwwroot","footer","show","removeOnClose","topPosition","window","innerHeight","document","querySelector","style","cssText","console","log","editor","startMolDrawButtonNameTitle","startMolDrawMenuItemNameTitle","buttonImage","Promise","all","component","ui","registry","addIcon","icon","html","addButton","startMolDrawButtonName","tooltip","onAction","addMenuItem","startMolDrawMenuItemName","text"],"mappings":";;;;;;;wNAwCMA,aAAeC,MAAAA,eACbC,eAAMC,OAAO,CACjBC,YAAa,mBAAU,cAAe,gBACtCC,KAAO,mBACKC,mBAAUC,OAAO,8BAA+B,CAC1DC,IAAM,GAAEC,gBAAOC,+EAIjBC,OAAS,mMAGTC,MAAM,EACNC,eAAe,QAQbC,aADeC,OAAOC,YADR,KAE+B,EAEjDC,SAASC,cAAc,iBAAiBC,MAAMC,QAC5C,0DAKAN,YACA,uBACFG,SAASC,cAAc,kBAAkBC,MAAMC,QAC7C,oCACFH,SAASC,cAAc,eAAeC,MAAMC,QAAU,cACtDL,OAAOM,QAAQC,IAAIC,2BAYGtB,gBAEpBuB,4BACAC,8BACAC,mBACQC,QAAQC,IAAI,EACpB,mBAAU,sBAAuBC,oBACjC,mBAAU,wBAAyBA,oBACnC,yBAAe,OAAQA,4BAGjBN,SAENA,OAAOO,GAAGC,SAASC,QAAQC,aAAMP,YAAYQ,MAG7CX,OAAOO,GAAGC,SAASI,UAAUC,+BAAwB,CACnDH,KAAAA,aACAI,QAASb,4BACTc,SAAU,IAAMtC,aAAauB,UAK/BA,OAAOO,GAAGC,SAASQ,YAAYC,iCAA0B,CACvDP,KAAAA,aACAQ,KAAMhB,8BACNa,SAAU,IAAMtC,aAAauB"}